// src/ai/flows/get-trending-products.ts
'use server';
/**
 * @fileOverview Generates a list of currently trending products by analyzing simulated Instagram data.
 *
 * - getTrendingProducts - A function that generates a list of trending products.
 * - TrendingProductsOutput - The return type for the getTrendingProducts function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { Product } from '@/lib/types';

const ProductReviewSchema = z.object({
    platform: z.literal('Instagram'),
    text: z.string().describe("The full text of the social media post."),
    username: z.string().describe("The username of the author of the post."),
    postUrl: z.string().describe("The direct URL to the social media post."),
});

// Data fetching function (Simulated)
const fetchInstagramData = async (query: string) => {
    console.log(`Simulating Instagram API call for query "${query}"...`);
    // REAL IMPLEMENTATION would use the Instagram Graph API.
    const mockPosts = {
        'air fryer': [{ text: `Love my new air fryer! So crispy! #airfryer #kitchengadgets`, username: 'foodie123', postUrl: '#' }],
        'skincare': [{ text: `This new serum is a game changer for my skin #skincare #glowup`, username: 'beauty_guru', postUrl: '#' }],
        'running shoes': [{ text: `Crushed my morning run in these new kicks! #run #fitness`, username: 'runner_dave', postUrl: '#' }],
    };
    const posts = mockPosts[query as keyof typeof mockPosts] || [];
    
    return posts.map(p => ({
        platform: 'Instagram' as const,
        ...p
    }));
};


const TrendingProductSchema = z.object({
  id: z.string().describe("A unique product ID, e.g., 'prod-001'"),
  name: z.string().describe('The name of the product.'),
  category: z.string().describe('The category the product belongs to.'),
  forecastedDemand: z.number().describe('The estimated weekly demand for this product.'),
  inventoryStatus: z.enum(['Optimal', 'Overstock', 'Understock']).describe('The current inventory status based on the trend.'),
  lastUpdated: z.string().describe("A human-readable string indicating when this data was generated, e.g., 'Just now' for live data or 'Generated by AI' for fallback data."),
  imageUrl: z.string().describe('A placeholder image URL for the product.'),
  reviews: z.array(ProductReviewSchema).optional().describe("A list of 2-3 of the most representative social media posts that signal this trend.")
});

const TrendingProductsOutputSchema = z.object({
    products: z.array(TrendingProductSchema)
});

export type TrendingProductsOutput = z.infer<typeof TrendingProductsOutputSchema>;

export async function getTrendingProducts(): Promise<Product[]> {
    const result = await trendingProductsFlow();
    return result.products as Product[];
}

const prompt = ai.definePrompt({
  name: 'getTrendingProductsPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  output: {schema: TrendingProductsOutputSchema},
  prompt: `You are the AI engine for "TrendSense," a real-time demand forecasting platform for Walmart. Your primary function is to analyze Instagram data to identify viral product trends.

You have been provided with a raw data stream of Instagram posts.

Instagram Data:
{{{socialMediaData}}}

Based on this live data, analyze it to identify up to 10 of the most relevant and impactful product trends for Walmart. A higher mention count with positive sentiment should result in higher demand and an 'Understock' status.

If the social media data is empty, generate a plausible list of 5-7 trending products across different categories like Electronics, Home Goods, and Apparel, based on your general knowledge of current consumer trends. In this case, set the 'lastUpdated' field to 'Generated by AI'.

For each of the products you identify, provide the following information:
- A unique product ID (e.g., prod-001, prod-002).
- The specific product name.
- A plausible Walmart category (e.g., Home Goods, Electronics, Apparel, Beauty, Groceries, Toys).
- A forecasted weekly demand as a number, reflecting its viral velocity.
- An inventory status: 'Understock' for new, explosive trends; 'Optimal' for established trends; 'Overstock' for fading trends.
- A lastUpdated string. Use 'Just now' for live data, and 'Generated by AI' for fallback data.
- A valid placeholder image URL from 'https://placehold.co' with a size of 64x64.
- A list of 2-3 of the most representative "reviews" (social media posts) from the provided data that justify why this product is trending. Each review must include the platform, text, username, and the exact postUrl provided in the source data. Do not alter the postUrl.

Return the list of products in the specified JSON format. Ensure the data reflects a diverse range of categories and consumer interests.`,
});


const trendingProductsFlow = ai.defineFlow(
  {
    name: 'trendingProductsFlow',
    outputSchema: TrendingProductsOutputSchema,
  },
  async () => {
    const topics = ['air fryer', 'skincare', 'running shoes', 'summer dress', 'gaming keyboard', 'protein powder', 'yoga mat', 'noise cancelling headphones', 'weighted blanket', 'electric scooter'];
    let allPosts: any[] = [];

    for (const topic of topics) {
        const instagramPosts = await fetchInstagramData(topic);
        allPosts = [...allPosts, ...instagramPosts];
    }
    
    const uniquePosts = Array.from(new Map(allPosts.map(p => [p.text, p])).values());

    const socialMediaData = JSON.stringify(uniquePosts, null, 2);
    
    console.log("-----BEGIN SOCIAL MEDIA ANALYSIS-----");
    console.log(`Sending ${uniquePosts.length} unique posts to the AI model.`);
    console.log("-----END SOCIAL MEDIA ANALYSIS-----");

    const {output} = await prompt({ socialMediaData });
    return output!;
  }
);
